ARCH?=AARCH64
TARGET?=zynq

WOLFBOOT_VERSION?=0

# RSA 4096-bit with SHA3-384
SIGN?=RSA4096
HASH?=SHA3
IMAGE_HEADER_SIZE?=1024

# Hashing Option
# 1. ARMv8+Crypto Assembly: HW_SHA3=0 and NO_ARM_ASM=0 (default)
# 2. CSU SHA3 hardware acceleration HW_SHA3=1 and NO_ARM_ASM=1
# 3. C Only HW_SHA3=0 and NO_ARM_ASM=1
NO_ARM_ASM?=0
HW_SHA3?=0

# XMSS/XMSS^MT is a post-quantum, stateful, hash-based signature scheme.
# Use the helper script `tools/xmss/xmss_siglen.sh`
# to calculate your signature length given an xmss parameter string.
#SIGN?=XMSS
#HASH?=SHA256
#XMSS_PARAMS='XMSS-SHA2_10_256'
#IMAGE_SIGNATURE_SIZE=2500
#IMAGE_HEADER_SIZE?=5000

# LMS/HSS is a post-quantum, stateful, hash-based signature scheme.
# Use the helper script `tools/lms/lms_siglen`
#SIGN?=LMS
#HASH?=SHA256
#LMS_LEVELS=2
#LMS_HEIGHT=5
#LMS_WINTERNITZ=8
#IMAGE_SIGNATURE_SIZE=2644
#IMAGE_HEADER_SIZE?=5288

DEBUG?=0
DEBUG_SYMBOLS=1
DEBUG_UART=1
CFLAGS_EXTRA+=-DDEBUG_ZYNQ=1
#OPTIMIZATION_LEVEL=2

VTOR?=1
CORTEX_M0?=0
NO_ASM?=0
ALLOW_DOWNGRADE?=0
NVM_FLASH_WRITEONCE?=0
V?=0
SPMATH?=1
RAM_CODE?=0
DUALBANK_SWAP?=0
PKA?=0
WOLFTPM?=0
EXT_FLASH?=1
SPI_FLASH?=0
NO_XIP=1
USE_GCC=1
ELF?=1
#DEBUG_ELF?=1

# Flash Sector Size
WOLFBOOT_SECTOR_SIZE=0x20000
# Application Partition Size
WOLFBOOT_PARTITION_SIZE=0x2A00000
# Location in Flash for wolfBoot
WOLFBOOT_ORIGIN=0x0
# Location in Flash for Primary Boot Partition
WOLFBOOT_PARTITION_BOOT_ADDRESS?=0x800000
# Load Partition to RAM Address
WOLFBOOT_LOAD_ADDRESS?=0x10000000
# Location in Flash for Secondary Partition
WOLFBOOT_PARTITION_UPDATE_ADDRESS?=0x3A00000
# Location to store wolfBoot state
WOLFBOOT_PARTITION_SWAP_ADDRESS?=0x63E0000

# DTS (Device Tree)
WOLFBOOT_LOAD_DTS_ADDRESS?=0x11800000
WOLFBOOT_DTS_BOOT_ADDRESS?=0x7B0000
WOLFBOOT_DTS_UPDATE_ADDRESS?=0x39B0000


CROSS_COMPILE=aarch64-none-elf-
#CROSS_COMPILE=aarch64-linux-gnu-

# Speed up reads from flash by using larger blocks
CFLAGS_EXTRA+=-DWOLFBOOT_SHA_BLOCK_SIZE=4096

# QSPI Reference Clock: Ref (125MHz default)
#CFLAGS_EXTRA+=-DGQSPI_CLK_REF=300000000

# QSPI Bus Divisor: (2 << div) = BUS (0=div2, 1=div4, 2=div8)
#CFLAGS_EXTRA+=-DGQSPI_CLK_DIV=0

# QSPI force IO mode (default is faster DMA mode)
#CFLAGS_EXTRA+=-DGQSPI_MODE_IO
